from queue import PriorityQueue
graph = {
    0: [(1, 1), (5, 2)],        # Node 0 is connected to nodes 1 and 2 w ith costs 4 and 5 respectively
    1: [(3, 2), (2, 3)],        # Node 1 is connected to nodes 3 and 4 with costs 2 and 3 respectively
    2: [],                # Node 2 is connected to node 5 with cost 4
    3: [(4, 1)],                # Node 3 is connected to node 6 with cost 5
    4: [],                # Node 4 is connected to node 7 with cost 1
    5: [(6, 6)],                # Node 5 is connected to node 8 with cost 6
    6: []                   # Node 9 is the target node and has no outgoing edges
}

def best_first_search(actual_Src, target):
    visited = set()
    pq = PriorityQueue()
    pq.put((0, actual_Src))

    while not pq.empty():
        cost, u = pq.get()
        print(u, end=" ")
        if u == target:
            break

        visited.add(u)
        for v,c in graph[u]:
            if v not in visited:
                pq.put((c, v))
    print()

# Test
source = 0
target = 4
best_first_search(source, target)
